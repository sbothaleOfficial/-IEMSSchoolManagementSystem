// <auto-generated />
using System;
using IEMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IEMS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250919151944_AddExpenseManagementTables")]
    partial class AddExpenseManagementTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("IEMS.Core.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7493),
                            Name = "Grade 10",
                            Section = "A",
                            TeacherId = 1,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7493)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7503),
                            Name = "Grade 10",
                            Section = "B",
                            TeacherId = 2,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7503)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7505),
                            Name = "Grade 9",
                            Section = "A",
                            TeacherId = 3,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7505)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7506),
                            Name = "Grade 9",
                            Section = "B",
                            TeacherId = 4,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7507)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7508),
                            Name = "Grade 8",
                            Section = "A",
                            TeacherId = 5,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7508)
                        });
                });

            modelBuilder.Entity("IEMS.Core.Entities.ElectricityBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("BillMonth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("BillYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Units")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitsRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BillNumber")
                        .IsUnique();

                    b.HasIndex("BillMonth", "BillYear")
                        .IsUnique();

                    b.ToTable("ElectricityBills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 8500m,
                            BillMonth = 8,
                            BillNumber = "EB001",
                            BillYear = 2024,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7767),
                            DueDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            Notes = "August 2024 electricity bill",
                            PaidDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 0,
                            Units = 180m,
                            UnitsRate = 4.5m,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7768)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 9200m,
                            BillMonth = 9,
                            BillNumber = "EB002",
                            BillYear = 2024,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7772),
                            DueDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = false,
                            Notes = "September 2024 electricity bill",
                            Units = 195m,
                            UnitsRate = 4.6m,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7773)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 7800m,
                            BillMonth = 7,
                            BillNumber = "EB003",
                            BillYear = 2024,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7777),
                            DueDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            Notes = "July 2024 electricity bill",
                            PaidDate = new DateTime(2024, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 1,
                            TransactionId = "TXN789123",
                            Units = 165m,
                            UnitsRate = 4.4m,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7777)
                        });
                });

            modelBuilder.Entity("IEMS.Core.Entities.FeePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FeeType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GeneratedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("InstallmentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LateFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PreviousBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptNumber")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("FeePayments");
                });

            modelBuilder.Entity("IEMS.Core.Entities.FeeStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("FeeType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassId", "FeeType", "AcademicYear")
                        .IsUnique();

                    b.ToTable("FeeStructures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcademicYear = "2024-25",
                            Amount = 60000m,
                            ClassId = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7616),
                            Description = "Annual Tuition Fees",
                            FeeType = 0,
                            IsActive = true,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7616)
                        },
                        new
                        {
                            Id = 2,
                            AcademicYear = "2024-25",
                            Amount = 5000m,
                            ClassId = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7620),
                            Description = "One-time Admission Fees",
                            FeeType = 1,
                            IsActive = true,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7621)
                        },
                        new
                        {
                            Id = 3,
                            AcademicYear = "2024-25",
                            Amount = 2000m,
                            ClassId = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7622),
                            Description = "Examination Fees",
                            FeeType = 2,
                            IsActive = true,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7623)
                        },
                        new
                        {
                            Id = 4,
                            AcademicYear = "2024-25",
                            Amount = 12000m,
                            ClassId = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7624),
                            Description = "Annual Transport Fees",
                            FeeType = 3,
                            IsActive = true,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7624)
                        },
                        new
                        {
                            Id = 5,
                            AcademicYear = "2024-25",
                            Amount = 60000m,
                            ClassId = 2,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7625),
                            Description = "Annual Tuition Fees",
                            FeeType = 0,
                            IsActive = true,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7626)
                        },
                        new
                        {
                            Id = 6,
                            AcademicYear = "2024-25",
                            Amount = 5000m,
                            ClassId = 2,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7627),
                            Description = "One-time Admission Fees",
                            FeeType = 1,
                            IsActive = true,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7627)
                        },
                        new
                        {
                            Id = 7,
                            AcademicYear = "2024-25",
                            Amount = 2000m,
                            ClassId = 2,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7629),
                            Description = "Examination Fees",
                            FeeType = 2,
                            IsActive = true,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7629)
                        },
                        new
                        {
                            Id = 8,
                            AcademicYear = "2024-25",
                            Amount = 12000m,
                            ClassId = 2,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7630),
                            Description = "Annual Transport Fees",
                            FeeType = 3,
                            IsActive = true,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7631)
                        });
                });

            modelBuilder.Entity("IEMS.Core.Entities.OtherExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpenseType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OtherExpenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2500m,
                            Category = 0,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7819),
                            Description = "Books, pens, papers for office use",
                            ExpenseDate = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            ExpenseType = "Office Supplies",
                            InvoiceNumber = "INV001",
                            PaymentMethod = 0,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7819),
                            VendorName = "Shree Stationery Mart"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 15000m,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7824),
                            Description = "Decorations, refreshments, and prizes for Independence Day",
                            ExpenseDate = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            ExpenseType = "Independence Day Celebration",
                            InvoiceNumber = "INV002",
                            PaymentMethod = 1,
                            TransactionId = "TXN456789",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7824),
                            VendorName = "Event Decorators"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 5500m,
                            BankName = "SBI Bank",
                            Category = 2,
                            ChequeNumber = "123456",
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7829),
                            Description = "Repair of desks and chairs in Grade 10 classroom",
                            ExpenseDate = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ExpenseType = "Classroom Repair",
                            InvoiceNumber = "INV003",
                            PaymentMethod = 2,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7829),
                            VendorName = "Repair Services"
                        });
                });

            modelBuilder.Entity("IEMS.Core.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AadharNumber")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MonthlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PANNumber")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AadharNumber = "123456789012",
                            Address = "101 Transport Ave, City",
                            BankAccountNumber = "1234567890",
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7583),
                            Email = "rajesh.kumar@school.edu",
                            EmployeeId = "ST001",
                            FirstName = "Rajesh",
                            JoiningDate = new DateTime(2020, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Kumar",
                            MonthlySalary = 25000m,
                            PANNumber = "ABCDE1234F",
                            PhoneNumber = "9876543213",
                            Position = "Driver",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7583)
                        },
                        new
                        {
                            Id = 2,
                            AadharNumber = "234567890123",
                            Address = "202 Clean St, City",
                            BankAccountNumber = "2345678901",
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7591),
                            Email = "kamala.devi@school.edu",
                            EmployeeId = "ST002",
                            FirstName = "Kamala",
                            JoiningDate = new DateTime(2019, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Devi",
                            MonthlySalary = 18000m,
                            PANNumber = "BCDEF2345G",
                            PhoneNumber = "9876543215",
                            Position = "Peon",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7591)
                        },
                        new
                        {
                            Id = 3,
                            AadharNumber = "345678901234",
                            Address = "303 Office Lane, City",
                            BankAccountNumber = "3456789012",
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7595),
                            Email = "suresh.singh@school.edu",
                            EmployeeId = "ST003",
                            FirstName = "Suresh",
                            JoiningDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Singh",
                            MonthlySalary = 22000m,
                            PANNumber = "CDEFG3456H",
                            PhoneNumber = "9876543217",
                            Position = "Clerk",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7595)
                        });
                });

            modelBuilder.Entity("IEMS.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CasteCategory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("CityVillage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassDivision")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBPL")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSemiEnglish")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("SerialNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Standard")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SerialNo")
                        .IsUnique();

                    b.HasIndex("StudentNumber")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, City",
                            AdmissionDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CasteCategory = "General",
                            CityVillage = "Mumbai",
                            ClassDivision = "A",
                            ClassId = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7538),
                            DateOfBirth = new DateTime(2008, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Robert Brown",
                            FirstName = "Alice",
                            Gender = "Female",
                            IsBPL = false,
                            IsSemiEnglish = true,
                            MotherName = "Mary Brown",
                            ParentMobileNumber = "9876543210",
                            Religion = "Christian",
                            SerialNo = 1,
                            Standard = "10th",
                            StudentNumber = "S001",
                            Surname = "Brown",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7538)
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Oak Ave, City",
                            AdmissionDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CasteCategory = "OBC",
                            CityVillage = "Pune",
                            ClassDivision = "A",
                            ClassId = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7551),
                            DateOfBirth = new DateTime(2008, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "David Wilson",
                            FirstName = "Bob",
                            Gender = "Male",
                            IsBPL = true,
                            IsSemiEnglish = false,
                            MotherName = "Susan Wilson",
                            ParentMobileNumber = "9876543211",
                            Religion = "Hindu",
                            SerialNo = 2,
                            Standard = "10th",
                            StudentNumber = "S002",
                            Surname = "Wilson",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7551)
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Pine Rd, City",
                            AdmissionDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CasteCategory = "SC",
                            CityVillage = "Nashik",
                            ClassDivision = "B",
                            ClassId = 2,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7556),
                            DateOfBirth = new DateTime(2008, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Michael Davis",
                            FirstName = "Charlie",
                            Gender = "Male",
                            IsBPL = true,
                            IsSemiEnglish = true,
                            MotherName = "Jennifer Davis",
                            ParentMobileNumber = "9876543212",
                            Religion = "Hindu",
                            SerialNo = 3,
                            Standard = "10th",
                            StudentNumber = "S003",
                            Surname = "Davis",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7556)
                        });
                });

            modelBuilder.Entity("IEMS.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AadharNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MonthlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PANNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AadharNumber = "1234-5678-9012",
                            Address = "123 Teachers Colony, Mumbai, Maharashtra",
                            BankAccountNumber = "SBI1234567890",
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7324),
                            Email = "priya.sharma@iemsschool.edu.in",
                            EmployeeId = "T001",
                            FirstName = "Priya",
                            JoiningDate = new DateTime(2020, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Sharma",
                            MonthlySalary = 55000m,
                            PANNumber = "ABCDE1234F",
                            PhoneNumber = "9876543201",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7325)
                        },
                        new
                        {
                            Id = 2,
                            AadharNumber = "2345-6789-0123",
                            Address = "456 Gandhi Nagar, Pune, Maharashtra",
                            BankAccountNumber = "HDFC9876543210",
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7330),
                            Email = "rajesh.patel@iemsschool.edu.in",
                            EmployeeId = "T002",
                            FirstName = "Rajesh",
                            JoiningDate = new DateTime(2019, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Patel",
                            MonthlySalary = 62000m,
                            PANNumber = "FGHIJ5678K",
                            PhoneNumber = "9876543202",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7331)
                        },
                        new
                        {
                            Id = 3,
                            AadharNumber = "3456-7890-1234",
                            Address = "789 Shivaji Park, Nashik, Maharashtra",
                            BankAccountNumber = "ICICI5432109876",
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7334),
                            Email = "anita.kulkarni@iemsschool.edu.in",
                            EmployeeId = "T003",
                            FirstName = "Anita",
                            JoiningDate = new DateTime(2021, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Kulkarni",
                            MonthlySalary = 48000m,
                            PANNumber = "LMNOP9012Q",
                            PhoneNumber = "9876543203",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7335)
                        },
                        new
                        {
                            Id = 4,
                            AadharNumber = "4567-8901-2345",
                            Address = "101 Nehru Colony, Nagpur, Maharashtra",
                            BankAccountNumber = "AXIS6789012345",
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7338),
                            Email = "suresh.gupta@iemsschool.edu.in",
                            EmployeeId = "T004",
                            FirstName = "Suresh",
                            JoiningDate = new DateTime(2018, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Gupta",
                            MonthlySalary = 68000m,
                            PANNumber = "RSTUV3456W",
                            PhoneNumber = "9876543204",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7339)
                        },
                        new
                        {
                            Id = 5,
                            AadharNumber = "5678-9012-3456",
                            Address = "202 Laxmi Nagar, Aurangabad, Maharashtra",
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7342),
                            EmployeeId = "T005",
                            FirstName = "Kavita",
                            JoiningDate = new DateTime(2022, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Singh",
                            MonthlySalary = 45000m,
                            PhoneNumber = "9876543205",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7343)
                        });
                });

            modelBuilder.Entity("IEMS.Core.Entities.TransportExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FuelType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("TransportExpenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5000m,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7719),
                            Description = "Fuel refill for bus",
                            DriverName = "Rajesh Kumar",
                            ExpenseDate = new DateTime(2025, 9, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            FuelType = 1,
                            InvoiceNumber = "F001",
                            Quantity = 50m,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7720),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 2500m,
                            Category = 2,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7725),
                            Description = "Engine oil change",
                            DriverName = "Rajesh Kumar",
                            ExpenseDate = new DateTime(2025, 9, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "M001",
                            Quantity = 1m,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7725),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1200m,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7730),
                            Description = "CNG refill for auto",
                            DriverName = "Suresh Patil",
                            ExpenseDate = new DateTime(2025, 9, 16, 0, 0, 0, 0, DateTimeKind.Local),
                            FuelType = 3,
                            InvoiceNumber = "F002",
                            Quantity = 20m,
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7730),
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("IEMS.Core.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VehicleNumber")
                        .IsUnique();

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7662),
                            DriverName = "Rajesh Kumar",
                            DriverPhone = "9876543213",
                            Route = "Main Street - School",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7662),
                            VehicleNumber = "MH12AB1234",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7666),
                            DriverName = "Suresh Patil",
                            DriverPhone = "9876543214",
                            Route = "Park Road - School",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7666),
                            VehicleNumber = "MH12CD5678",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7668),
                            DriverName = "Mohan Singh",
                            DriverPhone = "9876543215",
                            Route = "Highway - School",
                            UpdatedAt = new DateTime(2025, 9, 19, 15, 19, 43, 910, DateTimeKind.Utc).AddTicks(7669),
                            VehicleNumber = "MH12EF9012",
                            VehicleType = 3
                        });
                });

            modelBuilder.Entity("IEMS.Core.Entities.Class", b =>
                {
                    b.HasOne("IEMS.Core.Entities.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IEMS.Core.Entities.FeePayment", b =>
                {
                    b.HasOne("IEMS.Core.Entities.Student", "Student")
                        .WithMany("FeePayments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IEMS.Core.Entities.FeeStructure", b =>
                {
                    b.HasOne("IEMS.Core.Entities.Class", "Class")
                        .WithMany("FeeStructures")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("IEMS.Core.Entities.Student", b =>
                {
                    b.HasOne("IEMS.Core.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("IEMS.Core.Entities.TransportExpense", b =>
                {
                    b.HasOne("IEMS.Core.Entities.Vehicle", "Vehicle")
                        .WithMany("TransportExpenses")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("IEMS.Core.Entities.Class", b =>
                {
                    b.Navigation("FeeStructures");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("IEMS.Core.Entities.Student", b =>
                {
                    b.Navigation("FeePayments");
                });

            modelBuilder.Entity("IEMS.Core.Entities.Teacher", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("IEMS.Core.Entities.Vehicle", b =>
                {
                    b.Navigation("TransportExpenses");
                });
#pragma warning restore 612, 618
        }
    }
}
